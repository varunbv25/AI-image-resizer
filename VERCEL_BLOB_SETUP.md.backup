# Vercel Blob Client Upload Setup Guide

## Overview

This application now supports uploading large files (>3MB) using Vercel Blob's client upload feature. This bypasses the 4.5MB Vercel function payload limit by uploading files directly from the browser to Vercel Blob storage, where they are processed and immediately deleted.

## Architecture

### How It Works

1. **Client-Side Upload**: Files larger than 3MB are uploaded directly from the browser to Vercel Blob storage
2. **Token Exchange**: The client first requests a secure upload token from your API route
3. **Direct Upload**: The file is uploaded directly to Vercel Blob (bypassing your serverless function)
4. **Processing**: Once uploaded, your server fetches, processes, and extracts image data
5. **Immediate Deletion**: The file is immediately deleted from Blob storage after processing
6. **Result Retrieval**: The client polls for the processed result

### File Flow

```
┌─────────────┐
│   Browser   │
│  (>3MB file)│
└──────┬──────┘
       │
       │ 1. Request upload token
       ├──────────────────────────────────┐
       │                                  │
       │                         ┌────────▼─────────┐
       │                         │  /api/blob-upload│
       │                         │  (Token Generator)│
       │                         └────────┬─────────┘
       │                                  │
       │ 2. Get secure token              │
       │◄─────────────────────────────────┘
       │
       │ 3. Upload directly to Blob
       ├──────────────────────────────────┐
       │                                  │
       │                         ┌────────▼─────────┐
       │                         │  Vercel Blob     │
       │                         │  Storage         │
       │                         └────────┬─────────┘
       │                                  │
       │                                  │ 4. Trigger onUploadCompleted
       │                         ┌────────▼─────────┐
       │                         │  Server Callback │
       │                         │  - Fetch file    │
       │                         │  - Process image │
       │                         │  - Store result  │
       │                         │  - Delete blob   │
       │                         └────────┬─────────┘
       │                                  │
       │ 5. Poll for result               │
       │◄─────────────────────────────────┘
       │
       │ 6. Get processed data
       ▼
┌─────────────┐
│   Display   │
└─────────────┘
```

## Setup Instructions

### 1. Create a Vercel Blob Store

1. Go to your [Vercel Dashboard](https://vercel.com/dashboard)
2. Select your project
3. Navigate to the **Storage** tab
4. Click **Create Database** → **Blob**
5. Follow the prompts to create your Blob store

Once created, Vercel automatically adds the `BLOB_READ_WRITE_TOKEN` environment variable to your project.

### 2. Configure Local Development

For local development, you need to copy the token to your local environment:

1. In the Vercel Dashboard, go to **Settings** → **Environment Variables**
2. Find and copy the `BLOB_READ_WRITE_TOKEN` value
3. Add it to your `.env.local` file:

```env
BLOB_READ_WRITE_TOKEN=vercel_blob_rw_xxxxxxxxxx
```

### 3. Deploy to Vercel

The environment variable is automatically available in production. No additional configuration needed!

## Implementation Details

### Key Files

**Core Implementation:**
1. **[src/app/api/blob-upload/route.ts](src/app/api/blob-upload/route.ts)** - API route handling token generation and upload completion
2. **[src/lib/blobUploadHelper.ts](src/lib/blobUploadHelper.ts)** - Client-side upload utility for both single and batch uploads
3. **[src/lib/batchUploadHelper.ts](src/lib/batchUploadHelper.ts)** - Enhanced batch upload utilities with blob support

**Hooks:**
4. **[src/hooks/useFileUpload.ts](src/hooks/useFileUpload.ts)** - React hook for single file uploads with automatic blob upload
5. **[src/hooks/useBatchUpload.ts](src/hooks/useBatchUpload.ts)** - React hook for batch uploads with progress tracking

**Components:**
6. **[src/components/ImageUploader.tsx](src/components/ImageUploader.tsx)** - Upload component with progress indicator

### Upload Strategy

The application automatically chooses the best upload method:

- **Files ≤ 3MB**: Traditional FormData upload to `/api/upload`
- **Files > 3MB**: Vercel Blob client upload (bypasses function payload limit)

### API Route: `/api/blob-upload`

**POST** - Token generation and upload handling
- Generates secure upload token
- Validates file types (JPEG, PNG, WebP, SVG)
- Sets 50MB maximum file size
- Processes and deletes file in `onUploadCompleted` callback

**GET** - Result retrieval
- Polls for processed upload result
- Returns image data and dimensions
- Automatically retries up to 30 times (30 seconds)

### Client-Side Usage

#### Single File Upload

The implementation is transparent - simply use the existing `useFileUpload` hook:

```tsx
import { useFileUpload } from '@/hooks/useFileUpload';

function MyComponent() {
  const { uploadFile, isUploading, uploadProgress, uploadedImage } = useFileUpload();

  // Files >3MB automatically use blob upload
  const handleUpload = (file: File) => {
    uploadFile(file);
  };

  return (
    <ImageUploader
      onImageUpload={handleUpload}
      isUploading={isUploading}
      uploadProgress={uploadProgress} // Shows progress for large files
    />
  );
}
```

#### Batch File Upload

For batch uploads, use the new `useBatchUpload` hook:

```tsx
import { useBatchUpload } from '@/hooks/useBatchUpload';

function BatchComponent() {
  const {
    uploadFiles,
    isUploading,
    uploadStatus,
    uploadResults,
    getFileProgress,
    getOverallProgress,
  } = useBatchUpload();

  const handleBatchUpload = async (files: File[]) => {
    // Automatically uses blob upload for files >3MB
    await uploadFiles(files, 3); // Upload max 3 files concurrently
  };

  return (
    <div>
      <ImageUploader
        onBatchImageUpload={handleBatchUpload}
        isUploading={isUploading}
        supportsBatch={true}
      />

      {/* Show overall progress */}
      <div>
        Progress: {uploadStatus.completed}/{uploadStatus.total} files
        ({getOverallProgress()}%)
      </div>

      {/* Show individual file progress */}
      {uploadResults.map((result, index) => (
        <div key={index}>
          {result.filename}: {getFileProgress(index)}%
          (Method: {result.uploadMethod})
        </div>
      ))}
    </div>
  );
}
```

#### Using Batch Upload Helper Directly

For more control, use the batch upload utilities directly:

```tsx
import { uploadBatchFiles, uploadBatchFile } from '@/lib/batchUploadHelper';

// Upload multiple files with custom callbacks
const results = await uploadBatchFiles(files, {
  maxConcurrent: 3,
  onProgress: (fileIndex, progress) => {
    console.log(`File ${fileIndex}: ${progress}%`);
  },
  onFileComplete: (fileIndex, result) => {
    console.log(`File ${fileIndex} completed:`, result);
  },
  onFileError: (fileIndex, error) => {
    console.error(`File ${fileIndex} failed:`, error);
  },
});

// Upload a single file in batch context
const result = await uploadBatchFile(file, (progress) => {
  console.log(`Progress: ${progress}%`);
});
```

## Benefits

### Single File Upload
✅ **No File Size Limit**: Upload files up to 50MB (configurable)
✅ **Bypasses Function Limits**: Direct upload avoids Vercel's 4.5MB payload limit
✅ **Secure**: Token-based authentication prevents unauthorized uploads
✅ **No Storage Costs**: Files are immediately deleted after processing
✅ **Progress Tracking**: Real-time upload progress for better UX
✅ **Automatic**: Seamlessly switches between upload methods based on file size

### Batch File Upload
✅ **Concurrent Uploads**: Upload multiple files simultaneously (configurable limit)
✅ **Individual Progress**: Track progress for each file in the batch
✅ **Overall Progress**: Track total batch completion percentage
✅ **Error Handling**: Individual file failures don't stop the entire batch
✅ **Mixed Upload Methods**: Large files use blob upload, small files use traditional upload
✅ **Configurable Concurrency**: Control how many files upload at once (default: 3)
✅ **Smart Retry Logic**: Failed uploads can be retried individually

## Production Considerations

### In-Memory Storage Limitation

The current implementation uses in-memory storage (`Map`) to temporarily store upload results. This has limitations:

- ⚠️ **Not suitable for production at scale**
- ⚠️ **Data lost on serverless function cold starts**
- ⚠️ **Not shared across multiple function instances**

### Recommended Production Solution

For production, replace the in-memory store with:

**Option 1: Redis** (Recommended)
```typescript
import { Redis } from '@upstash/redis';

const redis = new Redis({
  url: process.env.UPSTASH_REDIS_URL!,
  token: process.env.UPSTASH_REDIS_TOKEN!,
});

// Store result
await redis.setex(blob.url, 300, JSON.stringify(uploadData)); // 5 min TTL

// Retrieve result
const result = await redis.get(blob.url);
```

**Option 2: Database** (Vercel Postgres, Supabase, etc.)
```typescript
// Store with expiration timestamp
await db.uploadResults.create({
  data: {
    blobUrl: blob.url,
    imageData: uploadData,
    expiresAt: new Date(Date.now() + 5 * 60 * 1000),
=======
# Vercel Blob Setup Guide

This application uses **Vercel Blob Storage** to bypass the 4.5MB serverless function limit and support image uploads of any size.

## Architecture

### Traditional Approach (❌ Limited to ~3MB)
```
Client → Serverless Function (4.5MB limit) → Processing
```
Files must be sent through the serverless function, limited by Vercel's 4.5MB payload limit.

### New Blob Approach (✅ Unlimited Size)
```
Client → Request Upload Token → Vercel Function (small request)
       ↓
Client → Upload File → Vercel Blob Storage (direct upload, no size limit)
       ↓
Client → Send Blob URL → Vercel Function → Fetch & Process
       ↓
Vercel Function → Delete Blob → Cleanup
```

The file never passes through the serverless function, allowing uploads of any size!

## Setup Steps

### 1. Install Dependencies

Already installed:
```bash
npm install @vercel/blob
```

### 2. Configure Environment Variables

Add to your `.env.local` file:

```bash
# Vercel Blob Storage (automatically configured on Vercel)
BLOB_READ_WRITE_TOKEN=your_token_here
```

**Important:** When deployed to Vercel, this token is automatically set. For local development:

1. Go to your Vercel project dashboard
2. Navigate to **Storage** → **Create Database** → **Blob**
3. Copy the `BLOB_READ_WRITE_TOKEN` from the environment variables
4. Add it to your local `.env.local` file

### 3. How It Works

#### Client-Side (Direct Upload)
The application uses the `useFileUploadWithBlob` hook:

```typescript
// src/hooks/useFileUploadWithBlob.ts
import { upload } from '@vercel/blob/client';

const blob = await upload(file.name, file, {
  access: 'public',
  handleUploadUrl: '/api/blob/upload-token',
  onUploadProgress: (progressEvent) => {
    // Track upload progress
>>>>>>> 14e65a42a6714bb4ecaa6ef777b1d3264cb8f1a7
  },
});
```

<<<<<<< HEAD
**Option 3: Vercel KV** (Simplest for Vercel)
```typescript
import { kv } from '@vercel/kv';

// Store result
await kv.set(blob.url, uploadData, { ex: 300 }); // 5 min TTL

// Retrieve result
const result = await kv.get(blob.url);
```

### Environment Variables

Ensure these are set in your Vercel project:

```env
# Required
BLOB_READ_WRITE_TOKEN=vercel_blob_rw_xxxxx

# Optional (for AI features)
GEMINI_API_KEY=your_gemini_api_key
```

## Monitoring & Debugging

### Logs to Watch

The implementation includes detailed logging:

```
✓ Upload completed to blob: https://...
✓ File fetched from blob, size: 5242880 bytes
✓ Image dimensions: { width: 4000, height: 3000 }
✓ Upload result stored for: https://...
✓ File successfully deleted from blob: https://...
```

### Common Issues

**1. Token not found error**
- **Cause**: `BLOB_READ_WRITE_TOKEN` not set
- **Solution**: Create Blob store in Vercel Dashboard and copy token to `.env.local`

**2. Upload result not found**
- **Cause**: Processing took too long or function cold start cleared memory
- **Solution**: Implement Redis/database for production (see above)

**3. File type not allowed**
- **Cause**: Unsupported file format
- **Solution**: Add format to `allowedContentTypes` in [src/app/api/blob-upload/route.ts:44](src/app/api/blob-upload/route.ts#L44)

## Testing

### Test Local Upload

```bash
# Start dev server
npm run dev

# Upload a large file (>3MB)
# Watch browser console for:
#   "Using Vercel Blob client upload for large file..."
#   "Blob upload completed: https://..."
#   "Upload result retrieved for: filename.jpg"
```

### Test Production Upload

After deploying to Vercel, monitor the function logs:
1. Vercel Dashboard → Your Project → Logs
2. Filter by `/api/blob-upload`
3. Verify the upload, process, and delete cycle

## Migration Guide

### From Traditional Upload

No code changes needed! The `useFileUpload` hook automatically:
1. Detects file size
2. Uses blob upload for files >3MB
3. Falls back to traditional upload for smaller files

### Adjusting Threshold

To change the 3MB threshold, edit [src/lib/blobUploadHelper.ts:98](src/lib/blobUploadHelper.ts#L98):

```typescript
export function shouldUseBlobUpload(fileSize: number): boolean {
  const threshold = 5 * 1024 * 1024; // Change to 5MB
  return fileSize > threshold;
}
```

## Security

### Authentication

The current implementation allows all uploads. **For production**, add authentication in [src/app/api/blob-upload/route.ts:38](src/app/api/blob-upload/route.ts#L38):

```typescript
onBeforeGenerateToken: async (pathname) => {
  // Verify user session
  const session = await getServerSession();
  if (!session) {
    throw new Error('Unauthorized');
  }

  return {
    allowedContentTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/svg+xml'],
    maximumSizeInBytes: 50 * 1024 * 1024,
    addRandomSuffix: true,
    tokenPayload: JSON.stringify({
      userId: session.user.id,
      uploadedAt: Date.now(),
    }),
  };
},
```

## Resources

- [Vercel Blob Documentation](https://vercel.com/docs/storage/vercel-blob)
- [Vercel Blob Client Uploads](https://vercel.com/docs/storage/vercel-blob/client-upload)
- [@vercel/blob Package](https://www.npmjs.com/package/@vercel/blob)

## Support

For issues or questions about this implementation:
1. Check the logs in Vercel Dashboard
2. Verify `BLOB_READ_WRITE_TOKEN` is set correctly
3. Review the [Common Issues](#common-issues) section above
=======
#### Server-Side (Token Generation)
```typescript
// src/app/api/blob/upload-token/route.ts
import { handleUpload } from '@vercel/blob/client';

export async function POST(request: NextRequest) {
  const jsonResponse = await handleUpload({
    body: request.body,
    request,
    onBeforeGenerateToken: async (pathname) => {
      // Validate file type
      return {
        allowedContentTypes: ['image/jpeg', 'image/png', 'image/webp', 'image/svg+xml'],
      };
    },
  });
  return NextResponse.json(jsonResponse);
}
```

#### Processing (Fetch from Blob)
```typescript
// src/app/api/compress-image/route.ts
if (blobUrl) {
  const response = await fetch(blobUrl);
  const arrayBuffer = await response.arrayBuffer();
  buffer = Buffer.from(arrayBuffer);
}
```

#### Cleanup (Delete After Processing)
```typescript
// Automatic cleanup after processing
import { del } from '@vercel/blob';
await del(blobUrl);
```

## API Routes

### `/api/blob/upload-token` (POST)
Generates a secure upload URL for client-side uploads.

**Request:**
```json
{
  "filename": "image.jpg"
}
```

**Response:**
```json
{
  "url": "https://blob.vercel-storage.com/...",
  "uploadUrl": "https://..."
}
```

### `/api/blob/fetch` (POST)
Fetches blob content for server-side processing (optional helper).

**Request:**
```json
{
  "blobUrl": "https://blob.vercel-storage.com/..."
}
```

**Response:**
```json
{
  "success": true,
  "data": {
    "imageData": "base64...",
    "mimetype": "image/jpeg",
    "size": 1234567
  }
}
```

### `/api/blob/delete` (POST)
Deletes a blob from storage.

**Request:**
```json
{
  "blobUrl": "https://blob.vercel-storage.com/..."
}
```

## Updated Processing Routes

All processing routes now support both blob URLs and legacy base64 data:

### `/api/compress-image` (POST)
```json
{
  "blobUrl": "https://blob.vercel-storage.com/...",  // New
  "imageData": "base64...",                           // Legacy fallback
  "quality": 80,
  "originalSize": 5000000
}
```

### `/api/process` (POST) - AI Resizing
```json
{
  "blobUrl": "https://blob.vercel-storage.com/...",  // New
  "imageData": "base64...",                           // Legacy fallback
  "targetDimensions": { "width": 1920, "height": 1080 },
  "strategy": { "type": "ai" }
}
```

## File Size Limits

| Method | Max Upload Size | Notes |
|--------|----------------|-------|
| **Legacy (Base64)** | ~3MB | Limited by 4.5MB serverless payload + Base64 overhead |
| **Blob Upload** | **Unlimited** | Direct client upload, no serverless limit |

## Benefits

✅ **No Size Limits** - Upload images of any size
✅ **Better Performance** - Direct uploads to blob storage
✅ **Automatic Cleanup** - Blobs deleted after processing
✅ **Backward Compatible** - Legacy base64 still supported
✅ **Progress Tracking** - Real-time upload progress

## Testing

Test with large files:

```bash
# Create a 50MB test image
convert -size 10000x10000 xc:white test-50mb.jpg

# Upload through the application
# Should now work without "FUNCTION_PAYLOAD_TOO_LARGE" error
```

## Troubleshooting

### "BLOB_READ_WRITE_TOKEN not found"
- Make sure you've created a Blob store in your Vercel project
- Copy the token to `.env.local` for local development
- Token is automatically set when deployed to Vercel

### "Failed to fetch image from blob storage"
- Check that the blob URL is valid and accessible
- Ensure the blob hasn't expired (default: 1 hour for upload URLs)
- Verify network connectivity to Vercel Blob storage

### "Invalid file type"
- Only JPEG, PNG, WebP, and SVG are supported
- Check the file extension and MIME type

## Cost Considerations

Vercel Blob Storage pricing:
- **Hobby Plan**: 1GB storage, 100GB bandwidth/month (included)
- **Pro Plan**: 100GB storage, 1TB bandwidth/month (included)
- **Enterprise**: Custom limits

Since we delete blobs after processing, storage usage is minimal. Main cost is bandwidth.

## Security

- Upload tokens are time-limited (default: 1 hour)
- File type validation on server-side
- Public read access only (no write)
- Automatic cleanup prevents blob accumulation
>>>>>>> 14e65a42a6714bb4ecaa6ef777b1d3264cb8f1a7
